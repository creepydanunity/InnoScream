name: Ci/CD

on:
  push:
    branches: [ main ]
  
jobs:
  app_bot_ci:
    name: Test & Lint app_bot
    runs-on: ubuntu-latest
    environment: app_api_env

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install project & dev-deps
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry install --no-interaction --no-ansi

      - name: Generate .env for app_bot
        run: |
          cat <<EOF > app_bot/.env
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          API_URL=${{ secrets.API_URL }}
          EOF

      - name: Run pytest with coverage
        working-directory: app_bot
        run: |
          poetry run pytest \
            --cov=. \
            --cov-report=term-missing \
            --cov-fail-under=60 \
            .

      - name: Check code complexity (radon)
        working-directory: app_bot
        run: |
          echo "Checking cyclomatic complexity â‰¤ 10"
          failures=$(poetry run radon cc . -n C)
          if [ -n "$failures" ]; then
            echo "Complexity violations (Rank > B):" >&2
            echo "$failures" >&2
            exit 1
          fi
          echo "All code blocks have CC â‰¤ 10"

      - name: Lint with flake8
        run: poetry run flake8 app_bot/

      - name: Security scan with Bandit
        run: poetry run bandit -r app_bot/ -s B101,B311

      - name: Check docstrings (pydocstyle)
        working-directory: app_bot
        run: poetry run pydocstyle .
  
  app_api_ci:
    name: Test, Lint & Coverage app_fastapi
    runs-on: ubuntu-latest
    environment: app_bot_env

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install project & dev-deps
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry install --no-interaction --no-ansi

      - name: Generate .env for app_fastapi
        run: |
          cat <<EOF > app_fastapi/.env
          DB_FILENAME=${{ secrets.DB_FILENAME }}
          DEFAULT_ADMIN_ID=${{ secrets.DEFAULT_ADMIN_ID }}
          IMGFLIP_API_PASSWORD=${{ secrets.IMGFLIP_API_PASSWORD }}
          IMGFLIP_API_USERNAME=${{ secrets.IMGFLIP_API_USERNAME }}
          USER_ID_SALT=${{ secrets.USER_ID_SALT }}
          EOF

      - name: Run pytest with coverage
        working-directory: app_fastapi
        run: |
          poetry run pytest \
            --cov=. \
            --cov-report=term-missing \
            --cov-fail-under=60 \
            .

      - name: Check code complexity (radon)
        working-directory: app_fastapi
        run: |
          echo "Checking cyclomatic complexity â‰¤ 10"
          failures=$(poetry run radon cc . -n C)
          if [ -n "$failures" ]; then
            echo "Complexity violations (Rank > B):" >&2
            echo "$failures" >&2
            exit 1
          fi
          echo "All code blocks have CC â‰¤ 10"

      - name: Lint with flake8
        run: poetry run flake8 app_fastapi/

      - name: Security scan with Bandit
        run: poetry run bandit -r app_fastapi/ -s B101,B311
      
      - name: Check docstrings (pydocstyle)
        working-directory: app_fastapi
        run: poetry run pydocstyle .
  
  deploy:
    name: ðŸš€ Deploy to prod
    runs-on: ubuntu-latest
    needs: 
      - app_bot_ci
      - app_api_ci
    if: ${{ github.ref == 'refs/heads/main' }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}

          script: |
            cd /var/www/InnoScream

            git pull origin main

            cat <<EOF > app_fastapi/.env
            DB_FILENAME=${{ secrets.DB_FILENAME }}
            DEFAULT_ADMIN_ID=${{ secrets.DEFAULT_ADMIN_ID }}
            IMGFLIP_API_PASSWORD=${{ secrets.IMGFLIP_API_PASSWORD }}
            IMGFLIP_API_USERNAME=${{ secrets.IMGFLIP_API_USERNAME }}
            USER_ID_SALT=${{ secrets.USER_ID_SALT }}
            EOF

            cat <<EOF > app_bot/.env
            BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            API_URL=${{ secrets.API_URL }}
            EOF

            docker compose build
            docker compose up -d

            echo "âœ… Deployment finished!"